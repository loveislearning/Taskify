<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Takify - Task Manager</title>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <link href="https://fonts.googleapis.com/css2?family=Raleway:wght@700&display=swap" rel="stylesheet">
  <style>
    @import url('https://fonts.googleapis.com/css2?family=Orbitron:wght@600&display=swap');
    body {
      font-family: 'Poppins', sans-serif;
      margin: 0;
      padding: 20px;
      background-color: #000;
      color: white;
      text-align: center;
    }
    .PM {
        font-family: 'Raleway', sans-serif;
        font-size: 3.5rem;
        position: relative;
        background: linear-gradient(135deg, #9f6eff, #52b6ff);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        text-shadow: 2px 2px 8px rgba(0, 0, 0, 0.3);
        font-weight: 700;
        letter-spacing: 1px;
        filter: drop-shadow(0 0 8px rgba(255, 255, 255, 0.1));
        overflow: hidden;
    }

    .gloss-text::before {
      content: '';
      position: absolute;
      top: 0;
      left: -75%;
      height: 100%;
      width: 50%;
      background: linear-gradient(
        120deg,
        rgba(255, 255, 255, 0) 0%,
        rgba(255, 255, 255, 0.5) 50%,
        rgba(255, 255, 255, 0) 100%
      );
      transform: skewX(-20deg);
      animation: glossOnce 2.5s ease-out forwards;
    }

    .controls {
      margin-bottom: 20px;
      display: flex;
      gap: 10px;
      justify-content: center;
      flex-wrap: wrap;
    }
    input, select, button {
      padding: 10px;
      border-radius: 6px;
      border: 1px solid #aaa;
      font-size: 16px;
      background-color: rgba(255, 255, 255, 0.1);
      color: white;
    }
    button {
      background-color: #007bff;
      color: white;
      border: none;
      cursor: pointer;
    }
    button:hover {
      background-color: #0056b3;
    }
    .separator {
      height: 2px;
      background: #aaa;
      margin: 20px auto;
      width: 90%;
    }
    .project-section {
      margin-top: 20px;
    }
    .project-section h2 {
      color: #00d4ff;
      margin-bottom: 10px;
    }
    .project-list {
      display: flex;
      gap: 20px;
      overflow-x: auto;
      padding: 10px;
      justify-content: flex-start;
    }
    .project-card {
        background: rgba(255, 255, 255, 0.1);
        padding: 20px;
        border-radius: 10px;
        width: 450px; 
        box-shadow: 0 2px 8px rgba(17, 17, 17, 0.9);
        text-align: left;
        flex-shrink: 0;
    }

    .task-list {
      list-style: none;
      padding: 0;
      margin-top: 10px;
    }
    .task-item {
      background: rgba(255, 255, 255, 0.1);
      padding: 10px;
      border-radius: 5px;
      margin-bottom: 8px;
      display: flex;
      justify-content: space-between;
      flex-direction: column;
      cursor: grab;
    }
    .task-status {
      margin-top: 5px;
      display: flex;
      gap: 5px;
      flex-wrap: wrap;
      align-items: center;
    }
    .progress-bar {
      width: 100%;
      background: #004494;
      border-radius: 6px;
      margin-top: 10px;
      height: 10px;
      overflow: hidden;
    }
    .progress {
      height: 100%;
      background: #00d4ff;
      transition: width 0.4s ease;
    }
    canvas {
      margin: 30px auto;
      display: block;
      max-width: 90%;
      height: 400px !important;
    }
    .task-overdue {
      color: red;
      font-weight: bold;
    }
    .summary-cards {
        display: flex;
        justify-content: center;
        flex-wrap: wrap;
        gap: 20px;
        margin: 20px auto;
        max-width: 1000px;
    }
    .summary-cards .card {
        background: rgba(255, 255, 255, 0.1);
        padding: 20px 30px;
        border-radius: 10px;
        box-shadow: 0 4px 10px rgba(17, 17, 17, 0.9);
        width: 220px;
        text-align: center;
    }
    .summary-cards .card h3 {
        margin: 0;
        font-size: 18px;
        color: #00d4ff;
    }
    .summary-cards .card p {
        margin: 10px 0 0;
        font-size: 24px;
        font-weight: bold;
        color: white;
    }
    
    @keyframes glossOnce {
      0% {
        left: -75%;
      }
      100% {
        left: 125%;
      }
    }

  </style>
</head>
<body>
  <h1 class="PM"><span class="gloss-text">Project Manager</span></h1>
  <div class="controls">
    <input type="text" id="new-project" placeholder="Enter project name">
    <select id="project-priority">
      <option value="High">High</option>
      <option value="Medium">Medium</option>
      <option value="Low">Low</option>
    </select>
    <button onclick="addProject()">Add Project</button>
    <button onclick="exportData()">â¬‡ Export</button>
    <input type="file" id="importFile" onchange="importData(event)" accept=".json">
    <button onclick="clearAllProjects()">ðŸ§¹ Clear All</button>
  </div>
  <div id="summary" class="summary-cards">
    <div class="card"><h3>Total Projects</h3><p id="total-projects">0</p></div>
    <div class="card"><h3>Total Tasks</h3><p id="total-tasks">0</p></div>
    <div class="card"><h3>Completed Tasks</h3><p id="completed-tasks">0</p></div>
    <div class="card"><h3>Pending Tasks</h3><p id="pending-tasks">0</p></div>
  </div>

    <div style="width: 100%; max-width: 1000px; height: 400px; margin: auto;">
        <canvas id="progressChart"></canvas>
    </div>
  
  <div class="separator"></div>
  <div id="projectList"></div>

  <script>
    let projects = JSON.parse(localStorage.getItem('projects')) || [];
    let progressChart = null;
    let draggedTaskIndex = null;
    let draggedProjectIndex = null;

    function saveProjects() {
      localStorage.setItem('projects', JSON.stringify(projects));
    }

    function exportData() {
      const blob = new Blob([JSON.stringify(projects, null, 2)], { type: 'application/json' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = 'projects.json';
      a.click();
      URL.revokeObjectURL(url);
    }

    function importData(event) {
      const file = event.target.files[0];
      if (!file) return;
      const reader = new FileReader();
      reader.onload = function(e) {
        try {
          projects = JSON.parse(e.target.result);
          saveProjects();
          displayProjects();
          updateChart();
          updateSummary(); 
        } catch (err) {
          alert("Invalid JSON file.");
        }
      };
      reader.readAsText(file);
    }

    function clearAllProjects() {
      if (confirm("Are you sure you want to delete all projects?")) {
        projects = [];
        localStorage.clear();
        displayProjects();
        updateChart();
        updateSummary(); 
      }
    }

    function updateChart() {
  const ctx = document.getElementById('progressChart').getContext('2d');

  const gradientPending = ctx.createLinearGradient(0, 0, 0, 400);
  gradientPending.addColorStop(0, '#00bfff');
  gradientPending.addColorStop(1, '#007acc');

  const gradientCompleted = ctx.createLinearGradient(0, 0, 0, 400);
  gradientCompleted.addColorStop(0, '#7bed9f');
  gradientCompleted.addColorStop(1, '#2ed573');

  const projectNames = projects.map(p => p.name);
  const pendingTasks = projects.map(p => p.tasks.filter(t => t.status !== 'Done').length);
  const completedTasks = projects.map(p => p.tasks.filter(t => t.status === 'Done').length);

  if (progressChart) progressChart.destroy();
  progressChart = new Chart(ctx, {
    type: 'bar',
    data: {
      labels: projectNames,
      datasets: [
        {
          label: 'Pending Tasks',
          data: pendingTasks,
          backgroundColor: gradientPending
        },
        {
          label: 'Completed Tasks',
          data: completedTasks,
          backgroundColor: gradientCompleted
        }
      ]
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      scales: {
        y: {
          beginAtZero: true
        }
      },
      plugins: {
        legend: {
          labels: {
            font: { size: 14 }
          }
        }
      },
      layout: {
        padding: 20
      }
    }
  });
}


    function addProject() {
      const name = document.getElementById('new-project').value.trim();
      const priority = document.getElementById('project-priority').value;
      if (!name) return;
      projects.push({ name, tasks: [], priority });
      saveProjects();
      document.getElementById('new-project').value = '';
      displayProjects();
      updateChart();
      updateSummary(); 
    }

    function addTask(event, projectIndex) {
      if (event.key === 'Enter') {
        const text = event.target.value.trim();
        const dateInput = document.getElementById(`date-input-${projectIndex}`);
        const dueDate = dateInput.value || new Date().toISOString().split('T')[0];
        if (!text) return;
        projects[projectIndex].tasks.push({ text, status: 'Started', dueDate });
        saveProjects();
        displayProjects();
        updateChart();
        updateSummary(); 
      }
    }

    function startVoiceInput(projectIndex) {
      if (!('webkitSpeechRecognition' in window)) {
        alert("Your browser doesn't support voice recognition.");
        return;
      }

      const recognition = new webkitSpeechRecognition();
      recognition.lang = 'en-US';
      recognition.interimResults = false;
      recognition.maxAlternatives = 1;

      recognition.onresult = function(event) {
        const transcript = event.results[0][0].transcript;
        const input = document.getElementById(`task-input-${projectIndex}`);
        input.value = transcript;
        input.focus();

        const enterEvent = new KeyboardEvent("keypress", { key: "Enter" });
        input.dispatchEvent(enterEvent);
      };

      recognition.onerror = function(e) {
        alert("Error with voice input: " + e.error);
      };

      recognition.start();
    }

    function changeTaskStatus(projectIndex, taskIndex, status) {
      projects[projectIndex].tasks[taskIndex].status = status;
      saveProjects();
      displayProjects();
      updateChart();
    }

    function deleteTask(projectIndex, taskIndex) {
      projects[projectIndex].tasks.splice(taskIndex, 1);
      saveProjects();
      displayProjects();
      updateChart();
      updateSummary(); 
    }

    function deleteProject(projectIndex) {
      projects.splice(projectIndex, 1);
      saveProjects();
      displayProjects();
      updateChart();
      updateSummary(); 
    }

    function startDrag(projectIndex, taskIndex) {
      draggedTaskIndex = taskIndex;
      draggedProjectIndex = projectIndex;
    }

    function dropTask(projectIndex, targetIndex) {
      if (draggedProjectIndex !== projectIndex) return;
      const tasks = projects[projectIndex].tasks;
      const [draggedTask] = tasks.splice(draggedTaskIndex, 1);
      tasks.splice(targetIndex, 0, draggedTask);
      saveProjects();
      displayProjects();
      updateChart();
    }

    function checkOverdueTasks() {
      if (!("Notification" in window)) return;

      if (Notification.permission !== "granted") {
        Notification.requestPermission();
      }

      const today = new Date().toISOString().split('T')[0];

      projects.forEach((project, pIdx) => {
        project.tasks.forEach((task, tIdx) => {
          if (task.status !== 'Done' && task.dueDate && task.dueDate < today) {
            const notifKey = `notified-${pIdx}-${tIdx}`;
            if (!localStorage.getItem(notifKey)) {
              new Notification(`Overdue Task: ${task.text}`, {
                body: `From project: ${project.name}`,
                icon: 'https://cdn-icons-png.flaticon.com/512/189/189792.png'
              });
              localStorage.setItem(notifKey, true);
            }
          }
        });
      });
    }

    setInterval(checkOverdueTasks, 60000);
    checkOverdueTasks();

    function displayProjects() {
      const container = document.getElementById('projectList');
      container.innerHTML = '';
      const priorities = ['High', 'Medium', 'Low'];

      priorities.forEach(priority => {
        const filtered = projects.filter(p => p.priority === priority);
        if (filtered.length > 0) {
          const section = document.createElement('div');
          section.className = 'project-section';
          section.innerHTML = `<h2>${priority} Priority</h2>`;
          const list = document.createElement('div');
          list.className = 'project-list';

          filtered.forEach((project, i) => {
            const index = projects.indexOf(project);
            const completed = project.tasks.filter(t => t.status === 'Done').length;
            const total = project.tasks.length;
            const percent = total === 0 ? 0 : Math.round((completed / total) * 100);

            const card = document.createElement('div');
            card.className = 'project-card';
            card.innerHTML = `
                    <div style="display: flex; justify-content: space-between; align-items: center;">
                        <h3 style="margin: 0;">${project.name}</h3>
                        <button onclick='deleteProject(${index})'>ðŸ—‘</button>
                    </div>
                    <div style="display: flex; gap: 5px; margin-top: 10px;">
                        <input type='text' id='task-input-${index}' placeholder='Add Task' onkeypress='addTask(event, ${index})' style="flex:1;">
                        <input type='date' id='date-input-${index}' style="width: 130px;">
                        <button onclick='startVoiceInput(${index})'>ðŸŽ¤</button>
                    </div>
                    <div class="progress-bar"><div class="progress" style="width:${percent}%"></div></div>
                    <ul class='task-list'>
                        ${project.tasks.map((task, tIdx) => `
                        <li class='task-item' draggable="true"
                            ondragstart="startDrag(${index}, ${tIdx})"
                            ondragover="event.preventDefault()"
                            ondrop="dropTask(${index}, ${tIdx})">
                            <span>${task.text} <small>(Due: ${task.dueDate || 'N/A'})</small></span>
                            <div class='task-status'>
                            <label><input type='radio' name='status-${index}-${tIdx}' value='Started'
                                onchange='changeTaskStatus(${index}, ${tIdx}, "Started")'
                                ${task.status === 'Started' ? 'checked' : ''}> Started</label>
                            <label><input type='radio' name='status-${index}-${tIdx}' value='In Progress'
                                onchange='changeTaskStatus(${index}, ${tIdx}, "In Progress")'
                                ${task.status === 'In Progress' ? 'checked' : ''}> In Progress</label>
                            <label><input type='radio' name='status-${index}-${tIdx}' value='Done'
                                onchange='changeTaskStatus(${index}, ${tIdx}, "Done")'
                                ${task.status === 'Done' ? 'checked' : ''}> Done</label>
                            <button onclick='deleteTask(${index}, ${tIdx})'>ðŸ—‘</button>
                            </div>
                        </li>
                        `).join('')}
                    </ul>
                    `;
            list.appendChild(card);
          });

          section.appendChild(list);
          container.appendChild(section);
        }
      });
    }
        function deleteTask(projectIndex, taskIndex) {
    const taskText = projects[projectIndex].tasks[taskIndex].text;
    const confirmDelete = confirm(`Are you sure you want to delete the task: "${taskText}"?`);
    if (confirmDelete) {
        projects[projectIndex].tasks.splice(taskIndex, 1);
        saveProjects();
        displayProjects();
        updateChart();
    }
    }
    function deleteProject(projectIndex) {
  const projectName = projects[projectIndex].name;
  const confirmDelete = confirm(`Are you sure you want to delete the project: "${projectName}"?\nAll its tasks will be removed.`);
  if (confirmDelete) {
    projects.splice(projectIndex, 1);
    saveProjects();
    displayProjects();
    updateChart();
  }
}
function updateSummary() {
  const totalProjects = projects.length;
  let totalTasks = 0;
  let completedTasks = 0;
  let pendingTasks = 0;

  projects.forEach(project => {
    totalTasks += project.tasks.length;
    completedTasks += project.tasks.filter(t => t.status === 'Done').length;
    pendingTasks += project.tasks.filter(t => t.status !== 'Done').length;
  });

  document.getElementById('total-projects').textContent = totalProjects;
  document.getElementById('total-tasks').textContent = totalTasks;
  document.getElementById('completed-tasks').textContent = completedTasks;
  document.getElementById('pending-tasks').textContent = pendingTasks;
}



        displayProjects();
        updateChart();
        updateSummary();
  </script>
</body>
</html>
