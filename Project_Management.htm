<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Expandable Navigation Bar</title>
  <style>
    body {
      margin: 0;
      background-color: #000;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      transition: margin-left 0.3s ease;
    }

    .sidebar {
      position: fixed;
      top: 0;
      left: 0;
      height: 100vh;
      background-color: #111;
      display: flex;
      flex-direction: column;
      padding: 10px 0;
      overflow-y: auto;
      scrollbar-width: thin;
      scrollbar-color: #333 #111;
      box-shadow: 4px 4px 20px rgba(0, 0, 0, 0.5);
      transition: width 0.3s ease-in-out;
      z-index: 1000;
    }

    .sidebar.compact {
      width: 70px;
      align-items: center;
    }

    .sidebar.expanded {
      width: 250px;
    }

    .sidebar::-webkit-scrollbar {
      width: 6px;
    }

    .sidebar::-webkit-scrollbar-track {
      background: #111;
    }

    .sidebar::-webkit-scrollbar-thumb {
      background-color: #333;
      border-radius: 10px;
    }

    .icon-compact {
      width: 55px;
      height: 55px;
      aspect-ratio: 1 / 1; 
      border-radius: 50%;
      margin: 8px 0;
      background-color: #222;
      background-size: cover;
      background-position: center;
      background-repeat: no-repeat;
      transition: all 0.3s ease;
      cursor: pointer;
    }

    .icon-compact:hover {
      border-radius: 25%;
      background-color: #333;
      transform: scale(1.05);
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.5);
    }

    .nav-item {
      display: flex;
      align-items: center;
      padding: 12px 20px;
      color: white;
      text-decoration: none;
      transition: background-color 0.3s ease;
      cursor: pointer;
    }

    .nav-item:hover {
      background-color: #333;
    }

    .nav-icon {
      width: 30px;
      height: 30px;
      margin-right: 15px;
      background-size: cover;
      background-position: center;
      background-repeat: no-repeat;
    }

    .nav-text {
      font-size: 14px;
      font-weight: 500;
      white-space: nowrap;
      opacity: 0;
      transition: opacity 0.3s ease;
    }

    .expanded .nav-text {
      opacity: 1;
    }

    .logo-item {
      display: none;
      align-items: center;
      padding: 15px 20px;
      margin-bottom: 10px;
    }

    .logo-icon-img {
      max-height: 50px;
      width: auto;
      margin-right: 15px;
    }

    .logo-text {
      font-size: 18px;
      font-weight: bold;
      color: white;
      white-space: nowrap;
      opacity: 0;
      transition: opacity 0.3s ease;
    }

    .expanded .logo-text {
      opacity: 1;
    }

    .divider {
      width: 80%;
      height: 1px;
      background-color: #444;
      margin: 14px auto;
    }

    .toggle-btn {
      position: absolute;
      top: 75px; 
      left: 50%;
      transform: translateX(-50%);
      width: 30px;
      height: 30px;
      background-color: #333;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      transition: all 0.3s ease;
    }


    .toggle-btn:hover {
      background-color: #444;
      transform: scale(1.1);
    }

    .toggle-arrow {
      width: 12px;
      height: 12px;
      border-right: 2px solid white;
      border-bottom: 2px solid white;
      transition: all 0.3s ease;
    }

    .compact .toggle-arrow {
      transform: rotate(-45deg);
    }

    .expanded .toggle-arrow {
      transform: rotate(135deg);
    }

    @media (max-width: 768px) {
      .sidebar.compact {
        width: 60px;
      }
      .icon-compact {
        width: 50px;
        height: 50px;
      }
      .sidebar.expanded {
        width: 220px;
      }
    }

    @media (max-width: 480px) {
      .sidebar.compact {
        width: 50px;
      }
      .icon-compact {
        width: 45px;
        height: 45px;
      }
      .sidebar.expanded {
        width: 200px;
      }
    }
  </style>
</head>
<body>
  <div class="sidebar compact" id="sidebar">
    <div class="icon-compact" style="background-image: url('/logo.png');" title="Logo"></div>

    <div class="divider"></div>
    <div class="toggle-btn compact" id="toggleBtn">
      <div class="toggle-arrow"></div>
    </div>

    <div class="icon-compact" style="background-image: url('/Dashboard.png');" title="Dashboard"></div>
    <div class="icon-compact" style="background-image: url('/Grade.png');" title="Grade Calculator"></div>
    <div class="icon-compact" style="background-image: url('/SubjectNaotes.png');" title="Subject Notes"></div>
    <div class="icon-compact" style="background-image: url('/TaskManager.png');" title="Task Manager"></div>
    <div class="icon-compact" style="background-image: url('/ProjectManagement.png');" title="Project Manager"></div>
    <div class="icon-compact" style="background-image: url('/SpinTheWheel.png');" title="Spin The Task"></div>
    <div class="icon-compact" style="background-image: url('/Motivational.png');" title="Inspirational Quotes"></div>
    <div class="icon-compact" style="background-image: url('/Timer.png');" title="Focus Timer"></div>
    <div class="icon-compact" style="background-image: url('/Subscription.png');" title="Subscriptions"></div>
    <div class="icon-compact" style="background-image: url('/Collaborative.png');" title="Collaboration"></div>
    <div class="icon-compact" style="background-image: url('/Ai.png');" title="AI Assistant"></div>
    <div class="icon-compact" style="background-image: url('/Journal.png');" title="Daily Journal"></div>
    <div class="icon-compact" style="background-image: url('/Trash.png');" title="Trash Bin"></div>

    <div class="logo-item" id="logoItem">
      <img src="/logo1.png" class="logo-icon-img" alt="My App Logo">
    </div>

    <div class="divider" style="display: none;"></div>

    <!-- Expanded nav items -->
    <div class="nav-item" style="display: none;"><div class="nav-icon" style="background-image: url('/Dashboard.png');"></div><div class="nav-text">Dashboard</div></div>
    <div class="nav-item" style="display: none;"><div class="nav-icon" style="background-image: url('/Grade.png');"></div><div class="nav-text">Grade Calculator</div></div>
    <div class="nav-item" style="display: none;"><div class="nav-icon" style="background-image: url('/SubjectNaotes.png');"></div><div class="nav-text">Subject Notes</div></div>
    <div class="nav-item" style="display: none;"><div class="nav-icon" style="background-image: url('/TaskManager.png');"></div><div class="nav-text">Task Manager</div></div>
    <div class="nav-item" style="display: none;"><div class="nav-icon" style="background-image: url('/ProjectManagement.png');"></div><div class="nav-text">Project Manager</div></div>
    <div class="nav-item" style="display: none;"><div class="nav-icon" style="background-image: url('/SpinTheWheel.png');"></div><div class="nav-text">Spin The Task</div></div>
    <div class="nav-item" style="display: none;"><div class="nav-icon" style="background-image: url('/Motivational.png');"></div><div class="nav-text">Inspirational Quotes</div></div>
    <div class="nav-item" style="display: none;"><div class="nav-icon" style="background-image: url('/Timer.png');"></div><div class="nav-text">Focus Timer</div></div>
    <div class="nav-item" style="display: none;"><div class="nav-icon" style="background-image: url('/Subscription.png');"></div><div class="nav-text">Subscriptions</div></div>
    <div class="nav-item" style="display: none;"><div class="nav-icon" style="background-image: url('/Collaborative.png');"></div><div class="nav-text">Collaboration</div></div>
    <div class="nav-item" style="display: none;"><div class="nav-icon" style="background-image: url('/Ai.png');"></div><div class="nav-text">AI Assistant</div></div>
    <div class="nav-item" style="display: none;"><div class="nav-icon" style="background-image: url('/Journal.png');"></div><div class="nav-text">Daily Journal</div></div>
    <div class="nav-item" style="display: none;"><div class="nav-icon" style="background-image: url('/Trash.png');"></div><div class="nav-text">Trash Bin</div></div>

  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function () {
      const toggleBtn = document.getElementById('toggleBtn');
      const sidebar = document.getElementById('sidebar');
      const body = document.body;
      const compactIcons = document.querySelectorAll('.icon-compact');
      const navItems = document.querySelectorAll('.nav-item');
      const dividers = document.querySelectorAll('.divider');
      const logoItem = document.getElementById('logoItem');

      function toggleSidebar() {
        sidebar.classList.toggle('compact');
        sidebar.classList.toggle('expanded');

        if (sidebar.classList.contains('expanded')) {
          body.style.marginLeft = '250px';
          navItems.forEach(item => item.style.display = 'flex');
          dividers.forEach(div => div.style.display = 'block');
          logoItem.style.display = 'flex';
          compactIcons.forEach(icon => icon.style.display = 'none');
        } else {
          body.style.marginLeft = '70px';
          navItems.forEach(item => item.style.display = 'none');
          dividers.forEach(div => div.style.display = 'none');
          logoItem.style.display = 'none';
          compactIcons.forEach(icon => icon.style.display = 'block');
        }

        localStorage.setItem('sidebarExpanded', sidebar.classList.contains('expanded'));
      }

      if (localStorage.getItem('sidebarExpanded') === 'true') {
        toggleSidebar();
      } else {
        body.style.marginLeft = '70px';
        navItems.forEach(item => item.style.display = 'none');
        logoItem.style.display = 'none';
        dividers.forEach((div, index) => {
          div.style.display = index === 0 ? 'block' : 'none';
        });
      }

      toggleBtn.addEventListener('click', toggleSidebar);
    });
  </script>
</body>
</html>

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Takify - Task Manager</title>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
  <style>
 body, html {
  overflow-x: hidden;
}

body {
  font-family: 'Inter', sans-serif;
  background-color: #12161d;
  color: #eaeaea;
  margin: 0;
  padding: 30px;
}

h1.PM {
  font-size: 3rem;
  background: linear-gradient(90deg, #4facfe 0%, #00f2fe 100%);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  font-weight: 700;
  margin-bottom: 30px;
  text-align: center;
}

.controls {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: 12px;
  margin-bottom: 30px;
}

input, select, button {
  font-size: 16px;
  padding: 12px 16px;
  border-radius: 8px;
  border: 1px solid #2c2f36;
  background-color: #1a1d23;
  color: #eaeaea;
  outline: none;
}

button {
  background: linear-gradient(135deg, #4facfe, #00f2fe);
  color: #12161d;
  font-weight: 600;
  transition: background 0.3s;
}

button:hover {
  background: linear-gradient(135deg, #00f2fe, #4facfe);
}

.summary-cards {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: 20px;
  margin-bottom: 40px;
}

.summary-cards .card {
  background-color: #1c2028;
  padding: 20px;
  border-radius: 12px;
  width: 220px;
  box-shadow: 0 4px 15px rgba(0,0,0,0.3);
  text-align: center;
  transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.summary-cards .card:hover {
  transform: translateY(-8px);
  box-shadow: 0 8px 25px rgba(0, 255, 255, 0.2);
  background-color: #232933;
}


.summary-cards .card h3 {
  font-size: 16px;
  color: #9fb3c8;
  margin-bottom: 8px;
}

.summary-cards .card p {
  font-size: 28px;
  font-weight: bold;
  color: #eaeaea;
}

.separator {
  height: 1px;
  background: #2c2f36;
  margin: 40px auto;
  width: 90%;
}

.project-section h2 {
  color: #4facfe;
  text-align: left;
  margin: 20px 0 10px 20px;
}

.project-list {
  display: flex;
  gap: 20px;
  overflow-x: auto;
  padding: 0 20px;
}

.project-card {
  background-color: #1e232b;
  padding: 20px;
  border-radius: 12px;
  width: 420px;
  box-shadow: 0 6px 20px rgba(0, 0, 0, 0.4);
  flex-shrink: 0;
}

.project-card h3 {
  margin: 0;
  font-size: 20px;
}

.task-list {
  list-style: none;
  margin-top: 12px;
  padding: 0;
}

.task-item {
  background-color: #2a2f38;
  padding: 12px;
  border-radius: 8px;
  margin-bottom: 10px;
  cursor: grab;
  transition: background 0.2s ease;
}

.task-item:hover {
  background-color: #353a44;
}

.task-status {
  display: flex;
  flex-wrap: wrap;
  gap: 8px;
  margin-top: 8px;
}

.task-status label {
  font-size: 14px;
}

.progress-bar {
  background-color: #2c2f36;
  border-radius: 8px;
  height: 10px;
  margin-top: 12px;
}

.progress {
  height: 100%;
  border-radius: 8px;
  background: linear-gradient(to right, #00f2fe, #4facfe);
  transition: width 0.3s ease-in-out;
}

canvas {
  max-width: 100%;
  width: 100%;
  height: 700px;
  display: block;
  margin: 50px auto;
}

.container {
  overflow-x: hidden;
  width: 100%;
}

/* Add Media Queries for responsiveness */
@media screen and (max-width: 768px) {
  body {
    padding: 20px;
  }

  .controls {
    flex-direction: column;
    align-items: center;
    gap: 16px;
  }

  input, select, button {
    width: 100%;
    max-width: 300px;
  }

  .summary-cards {
    flex-direction: column;
    align-items: center;
  }

  .summary-cards .card {
    width: 100%;
    max-width: 320px;
  }

  .project-section h2 {
    font-size: 1.5rem;
    text-align: center;
  }

  .project-list {
    flex-direction: column;
    align-items: center;
    gap: 20px;
    overflow-x: unset;
  }

  .project-card {
    width: 90%;
    max-width: 480px;
    margin-bottom: 20px;
  }

  .task-item {
    font-size: 14px;
  }

  .progress-bar {
    margin-top: 8px;
    height: 8px;
  }

  canvas {
    height: 400px;
  }

  button {
    font-size: 14px;
    padding: 10px 12px;
  }
}

@media screen and (max-width: 480px) {
  h1.PM {
    font-size: 2.5rem;
    margin-bottom: 20px;
  }

  .summary-cards .card {
    width: 100%;
    max-width: 290px;
    padding: 15px;
  }

  .controls {
    flex-direction: column;
    gap: 10px;
  }

  .project-card {
    width: 100%;
    max-width: 420px;
    padding: 15px;
  }

  .task-item {
    font-size: 12px;
  }

  .task-status label {
    font-size: 12px;
  }

  .project-section h2 {
    font-size: 1.2rem;
  }

  canvas {
    height: 350px;
  }

  button {
    font-size: 12px;
    padding: 8px 10px;
  }
}




  </style>
</head>
<body>
  <h1 class="PM"><span class="gloss-text">Project Manager</span></h1>
  <div class="controls">
    <input type="text" id="new-project" placeholder="Enter project name">
    <select id="project-priority">
      <option value="High">High</option>
      <option value="Medium">Medium</option>
      <option value="Low">Low</option>
    </select>
    <button onclick="addProject()">Add Project</button>
    <button onclick="clearAllProjects()">🧹 Clear All</button>
  </div>
  <div id="summary" class="summary-cards">
    <div class="card"><h3>Total Projects</h3><p id="total-projects">0</p></div>
    <div class="card"><h3>Total Tasks</h3><p id="total-tasks">0</p></div>
    <div class="card"><h3>Completed Tasks</h3><p id="completed-tasks">0</p></div>
    <div class="card"><h3>Pending Tasks</h3><p id="pending-tasks">0</p></div>
  </div>

    <div style="width: 100%; max-width: 1000px; height: 400px; margin: auto;">
        <canvas id="progressChart"></canvas>
    </div>
  
  <div class="separator"></div>
  <div id="projectList"></div>

  <script>
    let projects = JSON.parse(localStorage.getItem('projects')) || [];
    let progressChart = null;
    let draggedTaskIndex = null;
    let draggedProjectIndex = null;

    function saveProjects() {
      localStorage.setItem('projects', JSON.stringify(projects));
    }

    function clearAllProjects() {
      if (confirm("Are you sure you want to delete all projects?")) {
        projects = [];
        localStorage.clear();
        displayProjects();
        updateChart();
        updateSummary(); 
      }
    }

    function updateChart() {
  const ctx = document.getElementById('progressChart').getContext('2d');

  const gradientPending = ctx.createLinearGradient(0, 0, 0, 400);
  gradientPending.addColorStop(0, '#00bfff');
  gradientPending.addColorStop(1, '#007acc');

  const gradientCompleted = ctx.createLinearGradient(0, 0, 0, 400);
  gradientCompleted.addColorStop(0, '#7bed9f');
  gradientCompleted.addColorStop(1, '#2ed573');

  const projectNames = projects.map(p => p.name);
  const pendingTasks = projects.map(p => p.tasks.filter(t => t.status !== 'Done').length);
  const completedTasks = projects.map(p => p.tasks.filter(t => t.status === 'Done').length);

  if (progressChart) progressChart.destroy();
  progressChart = new Chart(ctx, {
    type: 'bar',
    data: {
      labels: projectNames,
      datasets: [
        {
          label: 'Pending Tasks',
          data: pendingTasks,
          backgroundColor: gradientPending
        },
        {
          label: 'Completed Tasks',
          data: completedTasks,
          backgroundColor: gradientCompleted
        }
      ]
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      scales: {
        y: {
          beginAtZero: true
        }
      },
      plugins: {
        legend: {
          labels: {
            font: { size: 14 }
          }
        }
      },
      layout: {
        padding: 20
      }
    }
  });
}


    function addProject() {
      const name = document.getElementById('new-project').value.trim();
      const priority = document.getElementById('project-priority').value;
      if (!name) return;
      projects.push({ name, tasks: [], priority });
      saveProjects();
      document.getElementById('new-project').value = '';
      displayProjects();
      updateChart();
      updateSummary(); 
    }

    function addTask(event, projectIndex) {
      if (event.key === 'Enter') {
        const text = event.target.value.trim();
        const dateInput = document.getElementById(`date-input-${projectIndex}`);
        const dueDate = dateInput.value || new Date().toISOString().split('T')[0];
        if (!text) return;
        projects[projectIndex].tasks.push({ text, status: 'Started', dueDate });
        saveProjects();
        displayProjects();
        updateChart();
        updateSummary(); 
      }
    }

    function startVoiceInput(projectIndex) {
      if (!('webkitSpeechRecognition' in window)) {
        alert("Your browser doesn't support voice recognition.");
        return;
      }

      const recognition = new webkitSpeechRecognition();
      recognition.lang = 'en-US';
      recognition.interimResults = false;
      recognition.maxAlternatives = 1;

      recognition.onresult = function(event) {
        const transcript = event.results[0][0].transcript;
        const input = document.getElementById(`task-input-${projectIndex}`);
        input.value = transcript;
        input.focus();

        const enterEvent = new KeyboardEvent("keypress", { key: "Enter" });
        input.dispatchEvent(enterEvent);
      };

      recognition.onerror = function(e) {
        alert("Error with voice input: " + e.error);
      };

      recognition.start();
    }

    function changeTaskStatus(projectIndex, taskIndex, status) {
      projects[projectIndex].tasks[taskIndex].status = status;
      saveProjects();
      displayProjects();
      updateChart();
    }

    function deleteTask(projectIndex, taskIndex) {
      projects[projectIndex].tasks.splice(taskIndex, 1);
      saveProjects();
      displayProjects();
      updateChart();
      updateSummary(); 
    }

    function deleteProject(projectIndex) {
      projects.splice(projectIndex, 1);
      saveProjects();
      displayProjects();
      updateChart();
      updateSummary(); 
    }

    function startDrag(projectIndex, taskIndex) {
      draggedTaskIndex = taskIndex;
      draggedProjectIndex = projectIndex;
    }

    function dropTask(projectIndex, targetIndex) {
      if (draggedProjectIndex !== projectIndex) return;
      const tasks = projects[projectIndex].tasks;
      const [draggedTask] = tasks.splice(draggedTaskIndex, 1);
      tasks.splice(targetIndex, 0, draggedTask);
      saveProjects();
      displayProjects();
      updateChart();
    }

    function checkOverdueTasks() {
  if (!("Notification" in window)) return;

  if (Notification.permission !== "granted") {
    Notification.requestPermission();
  }

  const today = new Date().toISOString().split('T')[0];

  projects.forEach((project, pIdx) => {
    project.tasks.forEach((task, tIdx) => {
      if (task.status !== 'Done' && task.dueDate && task.dueDate < today) {
        const notifKey = `notified-${pIdx}-${tIdx}`;
        if (!localStorage.getItem(notifKey)) {
          new Notification(`Overdue Task: ${task.text}`, {
            body: `From project: ${project.name}`,
            icon: 'https://cdn-icons-png.flaticon.com/512/189/189792.png'
          });
          localStorage.setItem(notifKey, true);
        }
      }
    });
  });
}
window.onload = () => {
  displayProjects();
  updateChart();
  updateSummary();
  checkOverdueTasks();
};


    setInterval(checkOverdueTasks, 60000);
    checkOverdueTasks();

    function displayProjects() {
  const container = document.getElementById('projectList');
  container.innerHTML = '';
  const priorities = ['High', 'Medium', 'Low'];

  priorities.forEach(priority => {
    const section = document.createElement('div');
    section.className = 'project-section';

    const heading = document.createElement('h2');
    heading.textContent = `${priority} Priority Projects`;
    section.appendChild(heading);

    const list = document.createElement('div');
    list.className = 'project-list';

    projects
      .map((p, index) => ({ ...p, index }))
      .filter(p => p.priority === priority)
      .forEach(({ name, tasks, index }) => {
        const card = document.createElement('div');
        card.className = 'project-card';

        const title = document.createElement('h3');
        title.textContent = name;
        card.appendChild(title);

        const input = document.createElement('input');
        input.type = 'text';
        input.placeholder = 'Add task...';
        input.id = `task-input-${index}`;
        input.onkeypress = (e) => addTask(e, index);
        card.appendChild(input);

        const dateInput = document.createElement('input');
        dateInput.type = 'date';
        dateInput.id = `date-input-${index}`;
        dateInput.style.margin = '8px 0';
        card.appendChild(dateInput);

        const micButton = document.createElement('button');
        micButton.textContent = '🎙️ Voice';
        micButton.onclick = () => startVoiceInput(index);
        card.appendChild(micButton);

        const ul = document.createElement('ul');
        ul.className = 'task-list';

        tasks.forEach((task, taskIdx) => {
          const li = document.createElement('li');
          li.className = 'task-item';
          li.draggable = true;
          li.ondragstart = () => startDrag(index, taskIdx);
          li.ondragover = (e) => e.preventDefault();
          li.ondrop = () => dropTask(index, taskIdx);

          li.innerHTML = `
            <strong>${task.text}</strong> - due <em>${task.dueDate}</em>
            <div class="task-status">
              <label><input type="radio" name="status-${index}-${taskIdx}" onclick="changeTaskStatus(${index}, ${taskIdx}, 'Started')" ${task.status === 'Started' ? 'checked' : ''}> Started</label>
              <label><input type="radio" name="status-${index}-${taskIdx}" onclick="changeTaskStatus(${index}, ${taskIdx}, 'In Progress')" ${task.status === 'In Progress' ? 'checked' : ''}> In Progress</label>
              <label><input type="radio" name="status-${index}-${taskIdx}" onclick="changeTaskStatus(${index}, ${taskIdx}, 'Done')" ${task.status === 'Done' ? 'checked' : ''}> Done</label>
              <button onclick="deleteTask(${index}, ${taskIdx})">❌</button>
            </div>
          `;
          ul.appendChild(li);
        });

        const progressContainer = document.createElement('div');
        progressContainer.className = 'progress-bar';

        const progress = document.createElement('div');
        progress.className = 'progress';
        const completed = tasks.filter(t => t.status === 'Done').length;
        const percent = tasks.length > 0 ? (completed / tasks.length) * 100 : 0;
        progress.style.width = percent + '%';

        progressContainer.appendChild(progress);
        card.appendChild(ul);
        card.appendChild(progressContainer);

        const deleteBtn = document.createElement('button');
        deleteBtn.textContent = '🗑 Delete Project';
        deleteBtn.onclick = () => deleteProject(index);
        deleteBtn.style.marginTop = '12px';
        card.appendChild(deleteBtn);

        list.appendChild(card);
      });

    if (list.children.length > 0) {
      section.appendChild(list);
      container.appendChild(section);
    }
  });
}
        function deleteTask(projectIndex, taskIndex) {
    const taskText = projects[projectIndex].tasks[taskIndex].text;
    const confirmDelete = confirm(`Are you sure you want to delete the task: "${taskText}"?`);
    if (confirmDelete) {
        projects[projectIndex].tasks.splice(taskIndex, 1);
        saveProjects();
        displayProjects();
        updateChart();
    }
    }
    function deleteProject(projectIndex) {
  const projectName = projects[projectIndex].name;
  const confirmDelete = confirm(`Are you sure you want to delete the project: "${projectName}"?\nAll its tasks will be removed.`);
  if (confirmDelete) {
    projects.splice(projectIndex, 1);
    saveProjects();
    displayProjects();
    updateChart();
  }
}
function updateSummary() {
  const totalProjects = projects.length;
  let totalTasks = 0;
  let completedTasks = 0;
  let pendingTasks = 0;

  projects.forEach(project => {
    totalTasks += project.tasks.length;
    completedTasks += project.tasks.filter(t => t.status === 'Done').length;
    pendingTasks += project.tasks.filter(t => t.status !== 'Done').length;
  });

  document.getElementById('total-projects').textContent = totalProjects;
  document.getElementById('total-tasks').textContent = totalTasks;
  document.getElementById('completed-tasks').textContent = completedTasks;
  document.getElementById('pending-tasks').textContent = pendingTasks;
}



        displayProjects();
        updateChart();
        updateSummary();
  </script>
</body>
</html>
